/**
 * NextGenPSD2 XS2A Framework
 * # Summary The **NextGenPSD2** *Framework Version 1.3.12* offers a modern, open, harmonised and interoperable set of Application Programming Interfaces (APIs) as the safest and most efficient way to provide data securely. The NextGenPSD2 Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards  in Europe and, aligned with the goals of the Euro Retail Payments Board, enables European banking customers to benefit from innovative products and services ('Banking as a Service') by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.  The possible Approaches are:   * Redirect SCA Approach   * OAuth SCA Approach   * Decoupled SCA Approach   * Embedded SCA Approach without SCA method   * Embedded SCA Approach with only one SCA method available   * Embedded SCA Approach with Selection of a SCA method    Not every message defined in this API definition is necessary for all approaches.    Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional.   Therefore for a particular implementation of a Berlin Group PSD2 compliant API it is only necessary to support    a certain subset of the methods defined in this API definition.    **Please have a look at the implementation guidelines if you are not sure    which message has to be used for the approach you are going to use.**  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Implementation Guidelines of the Berlin Group PSD2 API.**    It is not a replacement in any sense.   The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group PSD2 API. * **This API definition contains the REST-API for requests from the PISP to the ASPSP.** * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.** * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md]        \"If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.\"      The element \"Accept\" will not be defined in this file at any place.      The elements \"Content-Type\" and \"Authorization\" are implicitly defined by the OpenApi tags \"content\" and \"security\".    * There are several predefined types which might occur in payment initiation messages,    but are not used in the standard JSON messages in the Implementation Guidelines.   Therefore they are not used in the corresponding messages in this file either.   We added them for the convenience of the user.   If there is a payment product, which needs these fields, one can easily use the predefined types.   But the ASPSP need not to accept them in general.    * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)    except they are mentioned in the Implementation Guidelines.**   Therefore the implementer might add these in his own realisation of a PSD2 complient API in addition to the elements defined in this file.     ## General Remarks on Data Types  The Berlin Group definition of UTF-8 strings in context of the PSD2 API has to support at least the following characters  a b c d e f g h i j k l m n o p q r s t u v w x y z  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  0 1 2 3 4 5 6 7 8 9  / - ? : ( ) . , ' +  Space 
 *
 * The version of the OpenAPI document: 1.3.12_2022-07-01
 * Contact: info@berlin-group.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package code.api.berlin.group.v1_3.model



case class AccountDetails (
  /* This shall be filled, if addressable resource are created by the ASPSP on the /accounts or /card-accounts endpoint. */
  resourceId: Option[String] = None,
  /* IBAN of an account. */
  iban: Option[String] = None,
  /* Basic Bank Account Number (BBAN) Identifier.  This data element can be used in the body of the consent request.   Message for retrieving account access consent from this account. This   data elements is used for payment accounts which have no IBAN.   ISO20022: Basic Bank Account Number (BBAN).       Identifier used nationally by financial institutions, i.e., in individual countries,    generally as part of a National Account Numbering Scheme(s),    which uniquely identifies the account of a customer.  */
  bban: Option[String] = None,
  /* Mobile phone number. */
  msisdn: Option[String] = None,
  /* ISO 4217 Alpha 3 currency code.  */
  currency: String,
  /* Name of the legal account owner.  If there is more than one owner, then e.g. two names might be noted here.  For a corporate account, the corporate name is used for this attribute. Even if supported by the ASPSP, the provision of this field might depend on the fact whether an explicit consent to this specific additional account information has been given by the PSU.  */
  ownerName: Option[String] = None,
  /* List of owner names.  */
  ownerNames: Option[Seq[AccountOwner]] = None,
  /* Name of the PSU. In case of a corporate account, this might be the person acting on behalf of the corporate.  */
  psuName: Option[String] = None,
  /* Name of the account, as assigned by the ASPSP, in agreement with the account owner in order to provide an additional means of identification of the account. */
  name: Option[String] = None,
  /* Name of the account as defined by the PSU within online channels.  */
  displayName: Option[String] = None,
  /* Product name of the bank for this account, proprietary definition. */
  product: Option[String] = None,
  /* ExternalCashAccountType1Code from ISO 20022.  */
  cashAccountType: Option[String] = None,
  status: Option[AccountStatus] = None,
  /* BICFI  */
  bic: Option[String] = None,
  /* Case of a set of pending card transactions, the APSP will provide the relevant cash account the card is set up on. */
  linkedAccounts: Option[String] = None,
  /* Specifies the usage of the account:   * PRIV: private personal account   * ORGA: professional account  */
  usage: Option[AccountDetailsEnums.Usage] = None,
  /* Specifications that might be provided by the ASPSP:   - characteristics of the account   - characteristics of the relevant card  */
  details: Option[String] = None,
  /* A list of balances regarding this account, e.g. the current balance, the last booked balance. The list might be restricted to the current balance.  */
  balances: Option[Seq[Balance]] = None,
  _links: Option[LinksAccountDetails] = None
) extends ApiModel

object AccountDetailsEnums {

  type Usage = Usage.Value
  object Usage extends Enumeration {
    val PRIV = Value("PRIV")
    val ORGA = Value("ORGA")
  }

}
